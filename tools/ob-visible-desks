#!/usr/bin/env python2

# This script is designed to have its output sent to a dock like dzen or xmobar.
#
# This script is cut ridiculously short by my xpybutil library. It allows us to 
# omit a lot of the nasty details of fetching properties windows.
#
# The biggest trick in this script is to re-orient the Xinerama screens in 
# their proper physical order (top to bottom then left to right).

markup = {
    'current':      '^fg(#00FF00)%s^fg()',
    'visible':      '^fg(#FF0000)%s^fg()',
    'hidden':       '^fg(#FFA500)%s^fg()',
    'hidden_empty': '^fg(#FFFFFF)%s^fg()',
}

import sys
import time

import xcb, xcb.xproto, xcb.xinerama

import xpybutil.event as event
import xpybutil.ewmh as ewmh
import xpybutil.util as util

c = xcb.connect()
root = util.get_root(c)
xinerama = c(xcb.xinerama.key)

c.core.ChangeWindowAttributes(root, xcb.xproto.CW.EventMask,
                              [xcb.xproto.EventMask.PropertyChange])
c.flush()

sleep = False
visibles = None
while visibles is None:
    if sleep:
        time.sleep(1)

    currentdesk = ewmh.get_current_desktop(c, root).reply()
    visibles = ewmh.get_visible_desktops(c, root).reply()
    names = ewmh.get_desktop_names(c, root).reply()
    deskcnt = ewmh.get_number_of_desktops(c, root).reply()
    sleep = True

def do_output(visibles, currentdesk, names, deskcnt):
    out_visible = []
    out_hidden = []

    # Get a mapping from Xinerama screen number to physical screen number
    xtophys = {}
    screenpos = []
    screens = xinerama.QueryScreens().reply()
    for i, s in enumerate(screens.screen_info):
        screenpos.append((s.y_org, s.x_org, i))
    for physscreen, (x, y, xscreen) in enumerate(sorted(screenpos)):
        xtophys[xscreen] = physscreen

    visibles = sorted(visibles, key=lambda desk: xtophys[visibles.index(desk)])
    for visible in visibles:
        if visible == currentdesk:
            out_visible.append(markup['current'] % names[visible])
        else:
            out_visible.append(markup['visible'] % names[visible])

    clients = ewmh.get_client_list(c, root).reply()
    nonemptydesks = set()
    for client in clients:
        nonemptydesks.add(ewmh.get_wm_desktop(c, client).reply())

    for d in xrange(deskcnt):
        if d not in visibles:
            if d in nonemptydesks:
                out_hidden.append(markup['hidden'] % names[d])
            else:
                out_hidden.append(markup['hidden_empty'] % names[d])

    print '[%s] %s' % (' '.join(out_visible), ' '.join(out_hidden))

    sys.stdout.flush()

do_output(visibles, currentdesk, names, deskcnt)

when_output = set(['_NET_CURRENT_DESKTOP', '_NET_VISIBLE_DESKTOPS',
                  '_NET_DESKTOP_NAMES', '_NET_NUMBER_DESKTOPS'])

try:
    while True:
        event.read(c, block=True)
        for e in event.queue():
            if not isinstance(e, xcb.xproto.PropertyNotifyEvent):
                continue

            aname = util.get_atom_name(c, e.atom)
            if aname == '_NET_CURRENT_DESKTOP':
                currentdesk = ewmh.get_current_desktop(c, root).reply()
            elif aname == '_NET_VISIBLE_DESKTOPS':
                visibles = ewmh.get_visible_desktops(c, root).reply()
            elif aname == '_NET_DESKTOP_NAMES':
                names = ewmh.get_desktop_names(c, root).reply()
            elif aname == '_NET_NUMBER_OF_DESKTOPS':
                deskcnt = ewmh.get_number_of_desktops(c, root).reply()

            if aname in when_output:
                do_output(visibles, currentdesk, names, deskcnt)

        c.flush()
except IOError, xcb.Exception:
    print >> sys.stderr, "X connection lost!"
